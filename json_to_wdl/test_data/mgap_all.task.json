[
  {
    "task_id": "Mgap_all",
    "main": "/mnt/disk0/pipeline/MGAP/bin/MGAP",
    "cmd": "${main} ${input_files.sample_list} --run_mode local --ref2ass ${input_files.ref2ass} --ref2core ${input_files.ref2core} --group ${input_files.group_list} && sh ${parameters.outdir}/shell/pipeline.sh",
    "cpu": 4,
    "memory": 10,
    "docker": {
      "image": "pfi:v0.1",
      "volumns": [
        "/storeData/db:/data/pipeline/pfi/db"
      ]
    },
    "outputs": [
      {
        "key": "result",
        "value": "${parameters.outdir}/Result",
        "file_pattern": "[*]",
        "type": "Folder"
      }
    ],
    "parameters": [
      {
        "order": 1,
        "key": "type",
        "map_key": "--type",
        "type": "String",
        "required": true,
        "display_name_en": "Sequencing type",
        "display_name_cn": "Sequencing type",
        "description_en": "Sequencing type",
        "description_cn": "Sequencing type",
        "validation_rule": "",
        "default": "",
        "value_from": "code#def getse(read2=${sample.metadata.files.read2}):\n  return'PE' if read2 else 'SE'#"
      },
      {
        "order": 2,
        "key": "analysis",
        "map_key": "--analysis",
        "type": "String",
        "required": true,
        "display_name_en": "Analysis steps",
        "display_name_cn": "Analysis steps",
        "description_en": "Analysis steps",
        "description_cn": "Analysis steps",
        "validation_rule": "",
        "default": "Merge-QC-Assembly-GenomeComponent:GenePredict-AnnoCompare:CorePan,VFDB,CARD,SNPIndel-Tree:cgSNP,wgSNP",
        "value_from": ""
      },
      {
        "order": 3,
        "key": "outdir",
        "map_key": "-o",
        "type": "String",
        "required": true,
        "display_name_en": "Output dir",
        "display_name_cn": "输出路径",
        "description_en": "Output dir",
        "description_cn": "输出路径",
        "validation_rule": "",
        "default": "result",
        "value_from": ""
      },
      {
          "order": 4,
          "key": "Phread",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "Phread",
          "display_name_cn": "Phread",
          "description_en": "Phred33 or Phred64",
          "description_cn": "质量体系，33或64",
          "validation_rule": "",
          "default": "33",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 5,
          "key": "lowQual",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "lowQual",
          "display_name_cn": "lowQual",
          "description_en": "low base quality threshold",
          "description_cn": "低质量阈值",
          "validation_rule": "",
          "default": "20",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 6,
          "key": "qualRate",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "qualRate",
          "display_name_cn": "qualRate",
          "description_en": "Percent of low base quality",
          "description_cn": "低质量碱基数目占比，高于这个比例的reads将会被过滤",
          "validation_rule": "",
          "default": "0.5",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 7,
          "key": "nRate",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "nRate",
          "display_name_cn": "nRate",
          "description_en": "Percent of N base",
          "description_cn": "N碱基占比，高于这个比例的reads将会被过滤",
          "validation_rule": "",
          "default": "0.1",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 8,
          "key": "cutoff",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "cutoff",
          "display_name_cn": "cutoff",
          "description_en": "The read number you want to keep in each clean fq file(unit:1024*1024, 0 means not cut reads)",
          "description_cn": "截取的clean reads数目，单位是1024*1024, 0 表示不截取",
          "validation_rule": "",
          "default": "0",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 9,
          "key": "trimbp",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "trimbp",
          "display_name_cn": "trimbp",
          "description_en": "trim some bp of the read's head and tail, default 0,0,0,0",
          "description_cn": "头尾截取的碱基数目，默认是 0，0，0，0",
          "validation_rule": "",
          "default": "0,0,0,0",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 10,
          "key": "GemomeSize",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "GemomeSize",
          "display_name_cn": "GemomeSize",
          "description_en": " Only in reference-guided assembly",
          "description_cn": "基因组大小，指定该批次的基因组大小，数据过高则会截取150x",
          "validation_rule": "",
          "default": "",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 11,
          "key": "refAssemblyMethod",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "refAssemblyMethod",
          "display_name_cn": "refAssemblyMethod",
          "description_en": " Reference guide assembly method, SPref assembly or Normal assembly",
          "description_cn": "有参组装方法，\"SPref assembly\"或\"Normal assembly\"，默认为 Normal assembly",
          "validation_rule": "",
          "default": "Normal assembly",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 12,
          "key": "sample_distance",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "sample_distance",
          "display_name_cn": "sample_distance",
          "description_en": " SPref assembly method sample squence distance, must short than shortest Reference fragment",
          "description_cn": "该参数用于\"SPref assembly\"，必须短于参考序列中最短的片段，默认为1000",
          "validation_rule": "",
          "default": "1000",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 13,
          "key": "scaffoldFilter",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "scaffoldFilter",
          "display_name_cn": "scaffoldFilter",
          "description_en": " Filter scaffolds lower than specified",
          "description_cn": "长度低于指定值的scaffold将被过滤，默认250bp",
          "validation_rule": "",
          "default": "500",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 14,
          "key": "extend",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "extend",
          "display_name_cn": "extend",
          "description_en": "Whether to extend scaffolds",
          "description_cn": "是否延伸scaffolds，默认yes",
          "validation_rule": "",
          "default": "yes",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 15,
          "key": "insertSize",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "insertSize",
          "display_name_cn": "insertSize",
          "description_en": " pair-reads insert length",
          "description_cn": "Pair-end测序文库插入片段长度，默认250bp",
          "validation_rule": "",
          "default": "250",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 16,
          "key": "insertMinimumError",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "insertMinimumError",
          "display_name_cn": "insertMinimumError",
          "description_en": " Allowable insert segment length error range",
          "description_cn": "允许的插入片段长度误差区间",
          "validation_rule": "",
          "default": "0.25",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 17,
          "key": "readsOrientation",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "readsOrientation",
          "display_name_cn": "readsOrientation",
          "description_en": " Pair-end reads orientation",
          "description_cn": "Pair-end测序文库方向，FR、RF、FF或RR，默认FR",
          "validation_rule": "",
          "default": "FR",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 18,
          "key": "contigOverlap",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "contigOverlap",
          "display_name_cn": "contigOverlap",
          "description_en": " Minimum overlap required between contigs to merge adjacent contigs in a scaffold",
          "description_cn": "Contigs合并为更长片段时最少的重叠碱基数，默认50bp",
          "validation_rule": "",
          "default": "50",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 19,
          "key": "minimalContig",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "minimalContig",
          "display_name_cn": "minimalContig",
          "description_en": " Minimal contig size to use for scaffolding. Contigs below this value are not used for scaffolding and are filtered out",
          "description_cn": "用于组合为scaffolds的最短contigs长度，默认100bp",
          "validation_rule": "",
          "default": "100",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 20,
          "key": "mimReadsOverlap",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "mimReadsOverlap",
          "display_name_cn": "mimReadsOverlap",
          "description_en": " Minimum number of overlapping bases of the reads with the contig during overhang consensus build up",
          "description_cn": "通过reads重叠构建更长contigs时，最少重叠碱基数，默认50bp",
          "validation_rule": "",
          "default": "50",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 21,
          "key": "linkRatio",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "linkRatio",
          "display_name_cn": "linkRatio",
          "description_en": " The minimum number of links (read pairs) a valid contig pair must have to beconsidered",
          "description_cn": " 将两个 contigs 连接成 scaffold 时，这两个 contigs 之间的连接数 与 其和其它 contigs 的连接数之间的最小比值",
          "validation_rule": "",
          "default": "0.8",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 22,
          "key": "minimalLinks",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "minimalLinks",
          "display_name_cn": "minimalLinks",
          "description_en": " Minimum number of reads needed to call a base during an extension",
          "description_cn": " 将两个 contigs 连接成 scaffold 时，需要的最小的 reads pairs 数目",
          "validation_rule": "",
          "default": "20",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 23,
          "key": "cd_hit_identity",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "cd-hit_identity",
          "display_name_cn": "cd-hit_identity",
          "description_en": " set int from 0 to 1",
          "description_cn": "短序列与长序列相似阈值，低过这个值将会被当作另一个聚类，默认0.5",
          "validation_rule": "",
          "default": "0.5",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 24,
          "key": "cd_hit_Options",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "cd-hit_Options",
          "display_name_cn": "cd-hit_Options",
          "description_en": " except -c -T -i -o",
          "description_cn": "cd-hit除'-c -T -i -o'可填充的参数，默认为-n 3 -p 1 -g 1 -d 0 -s 0.7 -aL 0.7 -aS 0.7",
          "validation_rule": "",
          "default": "-n 3 -p 1 -g 1 -d 0 -s 0.7 -aL 0.7 -aS 0.7",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 25,
          "key": "refSet",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "refSet",
          "display_name_cn": "refSet",
          "description_en": " setA or setB",
          "description_cn": "毒力基因数据集选择，setA或setB，默认setB",
          "validation_rule": "",
          "default": "setB",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 26,
          "key": "identity",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "identity",
          "display_name_cn": "identity",
          "description_en": "Similarity between sequence and reference data set sequence, default 90",
          "description_cn": "序列与参考数据集序列的相似度，默认90",
          "validation_rule": "",
          "default": "90",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 27,
          "key": "blastScore",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "blastScore",
          "display_name_cn": "blastScore",
          "description_en": "The threshold score of the quire sequence compared to the reference data set, default 60",
          "description_cn": "序列与参考数据集比对的最低得分，默认60",
          "validation_rule": "",
          "default": "60",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 28,
          "key": "AMR_identity",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "AMR_identity",
          "display_name_cn": "AMR_identity",
          "description_en": "Reference coverage identity, default 85",
          "description_cn": "序列与参考数据集序列的相似度，默认85",
          "validation_rule": "",
          "default": "85",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 29,
          "key": "AMR_coverage",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "AMR_coverage",
          "display_name_cn": "AMR_coverage",
          "description_en": "Reference coverage threshold, default 90",
          "description_cn": "序列与参考数据集序列的覆盖度，默认90",
          "validation_rule": "",
          "default": "90",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 30,
          "key": "snpNum",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "snpNum",
          "display_name_cn": "snpNum",
          "description_en": "Whether to show the number of snps sites on the phylogenetics tree, yes or no, default no",
          "description_cn": "是否在进化树上显示snp数目，yes或no，默认no",
          "validation_rule": "",
          "default": "No",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       }
    ],
    "input_files": [
      {
        "file_name": "sample_list",
        "barcode_files_type": "EACH_LINE",
        "column_separator": "\t",
        "columns": [
          {
            "value_from": "${sample.sample_id}"
          },
          {
            "value_from": "${sample.metadata.sample_type}",
            "required": true,
            "validation_rule": ["fungi", "bacteria", "virus"]
          },
          {
            "value_from": "${sample.metadata.files.read1}",
            "required": true,
            "file_filter": "*.fq.gz,*fq,*gz"
          },
          {
            "value_from": "${sample.metadata.files.read2}",
            "required": false,
            "file_filter": "*.fq.gz,*fq,*gz"
          },
          {
            "value_from": "${sample.metadata.adapter3}",
            "required": false
          },
          {
            "value_from": "${sample.metadata.adapter5}",
            "required": false
          }
        ]
      },
      {
         "file_name": "group_list",
         "codes": [
            "def get_group_list(samples):",
            "    group_line = \"\"",
            "    group_mapping = {}",
            "    group_names = []",
            "    global_group_name = None",
            "    for sample in samples:",
            "        name = sample.get('metadata').get('group_name', '')",
            "        if name != '' and name not in group_names:",
            "            group_names.append(name)",
            "    if len(group_names) == 1:",
            "        global_group_name = group_names[0]",
            "    elif len(group_names) == 0:",
            "        global_group_name = 'group_1'",
            "    for sample in samples:",
            "        metadata = sample['metadata']",
            "        serial_number = sample['sample_id']",
            "        group_name = global_group_name if global_group_name else metadata.get(\"group_name\")",
            "        #ref2core_list",
            "        if not group_mapping.get(group_name, []):",
            "            group_mapping[group_name] = []",
            "        group_mapping[group_name].append(serial_number)",
            "    #group_list",
            "    group_count = 1",
            "    for group in group_mapping:",
            "        sample_name_count = 1",
            "        group_line += \"%s\t\" % group",
            "        for sample_name in group_mapping[group]:",
            "            group_line += \"%s\" % sample_name",
            "            if sample_name_count != len(group_mapping[group]):",
            "                group_line += \"\t\"",
            "            sample_name_count += 1",
            "        if group_count != len(group_mapping):",
            "            group_line += \"\\n\"",
            "        group_count += 1",
            "    return group_line"
         ]
      },
      {
         "file_name": "ref2core",
         "codes": [
             "def get_ref2core(samples):",
             "    ref2core_lines = []",
             "    group_names = []",
             "    global_group_name = None",
             "    for sample in samples:",
             "        name = sample.get('metadata').get('group_name', '')",
             "        if name != '' and name not in group_names:",
             "            group_names.append(name)",
             "    if len(group_names) == 1:",
             "        global_group_name = group_names[0]",
             "    elif len(group_names) == 0:",
             "        global_group_name = 'group_1'",
             "    for sample in samples:",
             "        lookup_values = samples[0].get('LOOKUPVALUES', [])",
             "        metadata = sample['metadata']",
             "        sample_type = metadata['sample_type']",
             "        group_name = metadata.get('group_name', '').strip()",
             "        ref_list = metadata.get('ref')",
             "        if global_group_name:",
             "            group_name = global_group_name",
             "        if ref_list and ref_list != '':",
             "            ref_list = ref_list.split(';')",
             "            for ref in ref_list:",
             "                sequence_name, genomic_sequence, protein_sequence = ('na', 'na', 'na',)",
             "                for lookup in lookup_values:",
             "                    if lookup.get('type') == 'ref' and ref == lookup.get('name'):",
             "                        sequence_name = lookup.get('name', 'na').strip()",
             "                        genomic_sequence = lookup.get('metadata.phylogenetic_genomic_sequence', 'na').strip()",
             "                        protein_sequence = lookup.get('metadata.phylogenetic_protein_sequence', 'na').strip()",
             "                ref2core_line = '%s\t%s\t%s\t%s' % (group_name,",
             "                                sample_type, sequence_name, genomic_sequence)",
             "                if protein_sequence != 'na' and protein_sequence.upper() != 'NONE':",
             "                    ref2core_line = '%s\t%s' %(ref2core_line, protein_sequence)",
             "                ref2core_lines.append(ref2core_line)",
             "        else:",
             "            sequence_name_list = metadata.get('sequence_name', '').split(';;;')",
             "            genomic_sequence_list = metadata.get('phylogenetic_genomic_sequence', '').split(';;;')",
             "            protein_sequence_list = metadata.get('phylogenetic_protein_sequence', '').split(';;;')",
             "            if metadata.get('sequence_name', '') != '' and len(sequence_name_list) > 0:",
             "                for i, sequence_name in enumerate(sequence_name_list):",
             "                    ref2core_line = '%s\t%s\t%s\t%s' % (group_name,",
             "                                                        sample_type, sequence_name, genomic_sequence_list[i])",
             "                    if len(protein_sequence_list) > i and protein_sequence_list[i].upper() != 'NONE':",
             "                        ref2core_line = '%s\t%s' % (ref2core_line, protein_sequence_list[i])",
             "                    ref2core_lines.append(ref2core_line)",
             "    return '\\n'.join(ref2core_lines)"
          ]
      },
      {
         "file_name": "ref2ass",
         "codes": [
            "def get_ref2ass(samples):",
            "    ref2ass_line = \"\"",
            "    index = 0",
            "    for sample in samples:",
            "        index += 1",
            "        metadata = sample['metadata']",
            "        serial_number = sample['sample_id']",
            "        sample_type = metadata[\"sample_type\"]",
            "        reference = metadata.get(\"phylogenetic_assembly_reference\", None)",
            "        if reference:",
            "            ref2ass_line += \"%s\t%s\t%s\"%(serial_number, sample_type, reference)",
            "            if index != len(samples):",
            "                ref2ass_line += \"\\n\"",
            "    return ref2ass_line"
         ]
      },
      {
        "file_name": "params_file",
        "no_need_create": true,
        "columns": [
          {
            "type": "String",
            "required": false,
            "display_name_en": "Group Name",
            "display_name_cn": "分组名称",
            "description_en": "Group Name",
            "description_cn": "分组名称",
            "value_from": "${sample.metadata.group_name}"
          },
          {
               "type": "String",
               "required": false,
               "display_name_en": "Sequence Name",
               "display_name_cn": "参考序列名称",
               "description_en": "Sequence Name",
               "description_cn": "参考序列名称",
               "value_from": "${sample.metadata.ref}",
               "lookup_mappings": "${ref.metadata.sequence_name}",
               "multiple_select": true,
               "split_by": ";;;"
            },
            {
               "type": "String",
               "required": false,
               "display_name_en": "Genomic Sequence",
               "display_name_cn": "基因组参考序列",
               "description_en": "Genomic Sequence",
               "description_cn": "基因组参考序列",
               "value_from": "${sample.metadata.ref}",
               "lookup_mappings": "${ref.metadata.phylogenetic_genomic_sequence}"
            },
            {
               "type": "String",
               "required": false,
               "display_name_en": "Protein Sequence",
               "display_name_cn": "蛋白参考序列",
               "description_en": "Protein Sequence",
               "description_cn": "蛋白参考序列",
               "value_from": "${sample.metadata.ref}",
               "lookup_mappings": "${ref.metadata.phylogenetic_protein_sequence}"
            },
          {
            "type": "File",
            "required": false,
            "display_name_en": "Assembly Reference",
            "display_name_cn": "组装参考序列",
            "description_en": "Assembly Reference",
            "description_cn": "组装参考序列",
            "value_from": "${sample.metadata.phylogenetic_assembly_reference}"
          }
        ]
      }
    ],
   "lookup_definition": [{
      "name": "ref",
      "metadata": [{
          "type": "File",
          "name": "phylogenetic_genomic_sequence",
          "filter": "*fa,*faa,*fna,*faa"
        },{
          "type": "File",
          "name": "phylogenetic_protein_sequence",
          "filter": "*fa,*faa,*fna,*faa"
        }
      ]
   }],
    "input": [
      {
        "key": "files.read1",
        "type": "File",
        "file_filter": "*.fq.gz,*fq"
      },
      {
        "key": "files.read2",
        "type": "File",
        "file_filter": "*.fq.gz,*fq"
      }
    ],
    "output": [
      {
        "key": "genomic",
        "type": "File",
        "pattern": "Assembly.fa$"
      }
    ]
  }
]