[
  {
    "task_id": "Mgap_tree",
    "main": "/mnt/disk0/pipeline/MGAP/bin/MGAP",
    "cmd": "${main} ${input_files.sample_list} --run_mode local --ref2core ${input_files.ref2core} --group ${input_files.group_list} && sh ${parameters.outdir}/shell/pipeline.sh",
    "cpu": 4,
    "memory": 10,
    "docker": {
      "image": "pfi:v0.1",
      "volumns": [
        "/storeData/db:/data/pipeline/pfi/db"
      ]
    },
    "outputs": [
      {
        "key": "result",
        "value": "${parameters.outdir}/Result",
        "file_pattern": "[*]",
        "type": "Folder"
      }
    ],
    "parameters": [{
        "order": 1,
        "key": "type",
        "map_key": "--type",
        "type": "String",
        "required": true,
        "display_name_en": "Sequencing type",
        "display_name_cn": "Sequencing type",
        "description_en": "Sequencing type",
        "description_cn": "Sequencing type",
        "validation_rule": "",
        "default": "",
        "value_from": "code#def getse(read2=${sample.metadata.files.read2}):\n  return'PE' if read2 else 'SE'#"
      },
      {
        "order": 2,
        "key": "analysis",
        "map_key": "--analysis",
        "type": "String",
        "required": true,
        "display_name_en": "Analysis steps",
        "display_name_cn": "Analysis steps",
        "description_en": "Analysis steps",
        "description_cn": "Analysis steps",
        "validation_rule": "",
        "default": "GenomeComponent:GenePredict-AnnoCompare:CorePan,SNPIndel-Tree:cgSNP,wgSNP",
        "value_from": ""
      },
      {
        "order": 3,
        "key": "outdir",
        "map_key": "-o",
        "type": "String",
        "required": true,
        "display_name_en": "Output dir",
        "display_name_cn": "输出路径",
        "description_en": "Output dir",
        "description_cn": "输出路径",
        "validation_rule": "",
        "default": "result",
        "value_from": ""
      },

       {
          "order": 23,
          "key": "cd_hit_identity",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "cd-hit_identity",
          "display_name_cn": "cd-hit_identity",
          "description_en": " set int from 0 to 1",
          "description_cn": "短序列与长序列相似阈值，低过这个值将会被当作另一个聚类，默认0.5",
          "validation_rule": "",
          "default": "0.5",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },
       {
          "order": 24,
          "key": "cd_hit_Options",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "cd-hit_Options",
          "display_name_cn": "cd-hit_Options",
          "description_en": " except -c -T -i -o",
          "description_cn": "cd-hit除'-c -T -i -o'可填充的参数，默认为-n 3 -p 1 -g 1 -d 0 -s 0.7 -aL 0.7 -aS 0.7",
          "validation_rule": "",
          "default": "-n 3 -p 1 -g 1 -d 0 -s 0.7 -aL 0.7 -aS 0.7",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       },

       {
          "order": 30,
          "key": "snpNum",
          "config_filename": "configFile",
          "map_key": "--conf",
          "type": "String",
          "required": false,
          "display_name_en": "snpNum",
          "display_name_cn": "snpNum",
          "description_en": "Whether to show the number of snps sites on the phylogenetics tree, yes or no, default no",
          "description_cn": "是否在进化树上显示snp数目，yes或no，默认no",
          "validation_rule": "",
          "default": "No",
          "value_from": "",
          "line_template": "%(key)s = %(value)s"
       }
    ],
    "input_files": [
      {
        "file_name": "sample_list",
        "barcode_files_type": "EACH_LINE",
        "column_separator": "\t",
        "columns": [
          {
            "value_from": "${sample.sample_id}"
          },
          {
            "value_from": "${sample.metadata.sample_type}",
            "validation_rule": ["fungi", "bacteria", "virus"]
          },
          {
            "value_from": "${sample.metadata.genomic}",
            "required": true,
            "type": "File",
            "file_filter": "*.fna,*fasta,*fa"
          }
        ]
      },
      {
         "file_name": "group_list",
         "codes": [
            "def get_group_list(samples):",
            "    group_line = \"\"",
            "    group_mapping = {}",
            "    group_names = []",
            "    global_group_name = None",
            "    for sample in samples:",
            "        name = sample.get('metadata').get('group_name', '')",
            "        if name != '' and name not in group_names:",
            "            group_names.append(name)",
            "    if len(group_names) == 1:",
            "        global_group_name = group_names[0]",
            "    elif len(group_names) == 0:",
            "        global_group_name = 'group_1'",
            "    for sample in samples:",
            "        metadata = sample['metadata']",
            "        serial_number = sample['sample_id']",
            "        group_name = global_group_name if global_group_name else metadata.get(\"group_name\")",
            "        #ref2core_list",
            "        if not group_mapping.get(group_name, []):",
            "            group_mapping[group_name] = []",
            "        group_mapping[group_name].append(serial_number)",
            "    #group_list",
            "    group_count = 1",
            "    for group in group_mapping:",
            "        sample_name_count = 1",
            "        group_line += \"%s\t\" % group",
            "        for sample_name in group_mapping[group]:",
            "            group_line += \"%s\" % sample_name",
            "            if sample_name_count != len(group_mapping[group]):",
            "                group_line += \"\t\"",
            "            sample_name_count += 1",
            "        if group_count != len(group_mapping):",
            "            group_line += \"\\n\"",
            "        group_count += 1",
            "    return group_line"
         ]
      },
      {
         "file_name": "ref2core",
         "codes": [
             "def get_ref2core(samples):",
             "    ref2core_lines = []",
             "    group_names = []",
             "    global_group_name = None",
             "    for sample in samples:",
             "        name = sample.get('metadata').get('group_name', '')",
             "        if name != '' and name not in group_names:",
             "            group_names.append(name)",
             "    if len(group_names) == 1:",
             "        global_group_name = group_names[0]",
             "    elif len(group_names) == 0:",
             "        global_group_name = 'group_1'",
             "    for sample in samples:",
             "        lookup_values = samples[0].get('LOOKUPVALUES', [])",
             "        metadata = sample['metadata']",
             "        sample_type = metadata['sample_type']",
             "        group_name = metadata.get('group_name', '').strip()",
             "        ref_list = metadata.get('ref')",
             "        if global_group_name:",
             "            group_name = global_group_name",
             "        if ref_list and ref_list != '':",
             "            ref_list = ref_list.split(';')",
             "            for ref in ref_list:",
             "                sequence_name, genomic_sequence, protein_sequence = ('na', 'na', 'na',)",
             "                for lookup in lookup_values:",
             "                    if lookup.get('type') == 'ref' and ref == lookup.get('name'):",
             "                        sequence_name = lookup.get('name', 'na').strip()",
             "                        genomic_sequence = lookup.get('metadata.phylogenetic_genomic_sequence', 'na').strip()",
             "                        protein_sequence = lookup.get('metadata.phylogenetic_protein_sequence', 'na').strip()",
             "                ref2core_line = '%s\t%s\t%s\t%s' % (group_name,",
             "                                sample_type, sequence_name, genomic_sequence)",
             "                if protein_sequence != 'na' and protein_sequence.upper() != 'NONE':",
             "                    ref2core_line = '%s\t%s' %(ref2core_line, protein_sequence)",
             "                ref2core_lines.append(ref2core_line)",
             "        else:",
             "            sequence_name_list = metadata.get('sequence_name', '').split(';;;')",
             "            genomic_sequence_list = metadata.get('phylogenetic_genomic_sequence', '').split(';;;')",
             "            protein_sequence_list = metadata.get('phylogenetic_protein_sequence', '').split(';;;')",
             "            if metadata.get('sequence_name', '') != '' and len(sequence_name_list) > 0:",
             "                for i, sequence_name in enumerate(sequence_name_list):",
             "                    ref2core_line = '%s\t%s\t%s\t%s' % (group_name,",
             "                                                        sample_type, sequence_name, genomic_sequence_list[i])",
             "                    if len(protein_sequence_list) > i and protein_sequence_list[i].upper() != 'NONE':",
             "                        ref2core_line = '%s\t%s' % (ref2core_line, protein_sequence_list[i])",
             "                    ref2core_lines.append(ref2core_line)",
             "    return '\\n'.join(ref2core_lines)"
          ]
      },
      {
        "file_name": "params_file",
        "no_need_create": true,
        "columns": [
          {
            "type": "String",
            "required": false,
            "display_name_en": "Group Name",
            "display_name_cn": "分组名称",
            "description_en": "Group Name",
            "description_cn": "分组名称",
            "value_from": "${sample.metadata.group_name}"
          },
          {
               "type": "String",
               "required": false,
               "display_name_en": "Sequence Name",
               "display_name_cn": "参考序列名称",
               "description_en": "Sequence Name",
               "description_cn": "参考序列名称",
               "value_from": "${sample.metadata.ref}",
               "lookup_mappings": "${ref.metadata.sequence_name}",
               "multiple_select": true,
               "split_by": ";;;"
            },
            {
               "type": "String",
               "required": false,
               "display_name_en": "Genomic Sequence",
               "display_name_cn": "基因组参考序列",
               "description_en": "Genomic Sequence",
               "description_cn": "基因组参考序列",
               "value_from": "${sample.metadata.ref}",
               "lookup_mappings": "${ref.metadata.phylogenetic_genomic_sequence}"
            },
            {
               "type": "String",
               "required": false,
               "display_name_en": "Protein Sequence",
               "display_name_cn": "蛋白参考序列",
               "description_en": "Protein Sequence",
               "description_cn": "蛋白参考序列",
               "value_from": "${sample.metadata.ref}",
               "lookup_mappings": "${ref.metadata.phylogenetic_protein_sequence}"
            }
        ]
      }
    ],
   "lookup_definition": [{
      "name": "ref",
      "metadata": [{
          "type": "File",
          "name": "phylogenetic_genomic_sequence",
          "filter": "*fa,*faa,*fna,*faa"
        },{
          "type": "File",
          "name": "phylogenetic_protein_sequence",
          "filter": "*fa,*faa,*fna,*faa"
        }
      ]
   }],
    "input": [
      {
        "key": "genomic",
        "type": "File",
        "file_filter": "*.fq.gz,*fq"
      }
    ],
    "output": []
  }
]